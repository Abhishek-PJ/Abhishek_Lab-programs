#include <stdio.h>
#include <stdlib.h>

// Edge structure to represent connections between vertices
struct Edge {
    int src, dest, weight;
};

// Subset structure for Union-Find operations
struct Subset {
    int parent, rank;
};

// Function to find the parent of a subset (with path compression)
int findParent(struct Subset subsets[], int vertex) {
    if (subsets[vertex].parent != vertex)
        subsets[vertex].parent = findParent(subsets, subsets[vertex].parent);
    return subsets[vertex].parent;
}

// Function to merge two subsets (with union by rank)
void mergeSubsets(struct Subset subsets[], int x, int y) {
    int xRoot = findParent(subsets, x);
    int yRoot = findParent(subsets, y);

    if (subsets[xRoot].rank < subsets[yRoot].rank)
        subsets[xRoot].parent = yRoot;
    else if (subsets[xRoot].rank > subsets[yRoot].rank)
        subsets[yRoot].parent = xRoot;
    else {
        subsets[yRoot].parent = xRoot;
        subsets[xRoot].rank++;
    }
}

// Comparison function for sorting edges by weight
int compareEdges(const void *a, const void *b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

// Function to find minimum spanning tree using Kruskal's algorithm
void kruskalMST(struct Edge edges[], int numVertices, int numEdges) {
    struct Edge result[numVertices];
    int edgeCount = 0, edgeIndex = 0;

    // Sort edges by weight
    qsort(edges, numEdges, sizeof(edges[0]), compareEdges);

    // Create subsets for each vertex
    struct Subset subsets[numVertices];
    for (int i = 0; i < numVertices; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    // Build MST by adding edges in increasing weight order
    while (edgeCount < numVertices - 1 && edgeIndex < numEdges) {
        struct Edge nextEdge = edges[edgeIndex++];

        int srcRoot = findParent(subsets, nextEdge.src);
        int destRoot = findParent(subsets, nextEdge.dest);

        if (srcRoot != destRoot) {
            result[edgeCount++] = nextEdge;
            mergeSubsets(subsets, srcRoot, destRoot);
        }
    }

    // Print the edges of the minimum spanning tree
    printf("Minimum Spanning Tree Edges:\n");
    for (int i = 0; i < edgeCount; i++)
        printf("%d -- %d == %d\n", result[i].src, result[i].dest, result[i].weight);
}

// Main function
int main() {
    int numVertices = 4, numEdges = 5;
    struct Edge edges[] = {{0, 1, 10}, {0, 2, 6}, {0, 3, 5}, {1, 3, 15}, {2, 3, 4}};

    // Find and print the minimum spanning tree
    kruskalMST(edges, numVertices, numEdges);

    return 0;
}
